name: 'Deploy to IPFS'
description: 'Merkleize and deploy static sites to IPFS with Storacha, with optional Pinata and Filebase pinning'
branding:
  icon: 'box'
  color: 'blue'

inputs:
  kubo-version:
    description: 'Kubo version to use for pinning https://dist.ipfs.tech/kubo/versions'
    default: 'v0.33.0'
    required: false
  path-to-deploy:
    description: 'Path to the directory containing the frontend build to merkleize into a CAR file and deploy to IPFS'
    required: true
  kubo-api-url:
    description: 'Kubo RPC API URL to pass to `ipfs --api`, e.g. `/dns/YOUR_DOMAIN/tcp/443/https`'
    required: false
  kubo-api-auth:
    description: 'Kubo RPC API auth secret to pass to `ipfs --api-auth`, e.g. `basic:hello:world` (defined as `AuthSecret` in `API.Authorizations` Kubo config)'
    required: false
  cluster-url:
    description: 'IPFS Cluster URL to pass to ipfs-cluster-ctl --host, e.g. /dnsaddr/...'
    required: false
  cluster-user:
    description: 'IPFS Cluster username used for basic http auth'
    required: false
  cluster-password:
    description: 'IPFS Cluster password used for basic http auth'
    required: false
  ipfs-cluster-ctl-version:
    description: 'IPFS Cluster CLI version to use'
    default: 'v1.1.2'
    required: false
  storacha-key:
    description: 'Storacha base64 encoded key to use to sign UCAN invocations. Create one using `w3 key create --json`. See: https://github.com/storacha/w3cli#w3_principal'
    required: false
  storacha-proof:
    description: 'Storacha Base64 encoded proof UCAN with capabilities for the space `w3 delegation create did:key:DID_OF_KEY -c space/blob/add -c space/index/add -c filecoin/offer -c upload/add --base64`'
    required: false
  pinata-pinning-url:
    description: 'Pinata Pinning Service URL'
    default: 'https://api.pinata.cloud/psa'
  pinata-jwt-token:
    description: 'Pinata JWT token for authentication'
    required: false
  filebase-bucket:
    description: 'Filebase bucket name'
    required: false
  filebase-access-key:
    description: 'Filebase access key'
    required: false
  filebase-secret-key:
    description: 'Filebase secret key'
    required: false
  create-github-deployments:
    description: 'Create a GitHub deployment'
    default: 'true'
    required: false
  github-token:
    description: 'GitHub token for updating commit status and PR comments'
    required: true
  set-github-status:
    description: 'Set GitHub commit status and PR comments'
    default: 'true'

outputs:
  cid:
    description: 'The IPFS CID of the uploaded content'
    value: ${{ steps.merkleize.outputs.cid }}

runs:
  using: 'composite'
  steps:
    - name: Validate action inputs
      shell: bash
      run: |
        # This checks if neither Storacha, IPFS Cluster, nor Kubo credentials are provided
        # It validates that at least one of the three credential sets is complete:
        # 1. Storacha: both key and proof must be set
        # 2. IPFS Cluster: url, user and password must all be set
        # 3. Kubo: api url and auth must both be set
        # If all credential sets are incomplete/empty, it will error
        if [[ -z "${{ inputs.storacha-key }}" || -z "${{ inputs.storacha-proof }}" ]] && [[ -z "${{ inputs.cluster-url }}" || -z "${{ inputs.cluster-user }}" || -z "${{ inputs.cluster-password }}" ]] && [[ -z "${{ inputs.kubo-api-url }}" || -z "${{ inputs.kubo-api-auth }}" ]]; then
          echo "::error::Either Storacha credentials (`storacha-key` and `storacha-proof`) or IPFS Cluster credentials (`cluster-url`, `cluster-user`, and `cluster-password`) or Kubo credentials (`kubo-api-url` and `kubo-api-auth`) must be configured"
          exit 1
        fi

    - name: Install ipfs-car
      shell: bash
      run: npm install -g ipfs-car@2

    - name: Merkleize into CAR file
      id: merkleize
      shell: bash
      run: |
        echo "ℹ️ Merkleizing ${{ inputs.path-to-deploy }} into CAR file"
        CID=$(npx ipfs-car pack ${{ inputs.path-to-deploy }} --no-wrap --output build.car 2>&1 | tail -n 1)
        echo "cid=$CID" >> "$GITHUB_OUTPUT"
        echo $CID
        echo "✅ Merkleized path: `${{ inputs.path-to-deploy }}` into CAR file with root CID $CID" >> $GITHUB_STEP_SUMMARY

    - name: Configure and upload CAR to Storacha
      if: ${{ inputs.storacha-key != '' && inputs.storacha-proof != ''}}
      shell: bash
      env:
        W3_PRINCIPAL: ${{ inputs.storacha-key }}
      run: |
        npm install -g @web3-storage/w3cli
        echo "ℹ️ Uploading CAR with CID ${{ steps.merkleize.outputs.cid }} to Storacha"
        w3 space add ${{ inputs.storacha-proof }}
        if ! w3 up --car build.car; then
          echo "::error::Failed to upload to Storacha"
          exit 1
        else
          echo "✅ Uploaded CAR with CID ${{ steps.merkleize.outputs.cid }} to Storacha" >> $GITHUB_STEP_SUMMARY

          echo "### 🚀 Build Preview on IPFS ready" >> $GITHUB_STEP_SUMMARY
          echo "- 🔎 Commit: ${{ github.event.pull_request.head.sha || github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔏 CID: ${{ steps.merkleize.outputs.cid }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [Preview](https://w3s.link/ipfs/${{ steps.merkleize.outputs.cid }})" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 [Service Worker Preview](https://inbrowser.link/ipfs/${{ steps.merkleize.outputs.cid }})" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Setup Kubo CLI
      if: ${{ inputs.pinata-jwt-token != '' || inputs.kubo-api-url != ''}}
      uses: ipfs/download-ipfs-distribution-action@v1
      with:
        name: kubo
        version: ${{ inputs.kubo-version }}

    - name: Upload CAR to Kubo
      if: ${{ inputs.kubo-api-url != '' && inputs.kubo-api-auth != ''}}
      shell: bash
      env:
        KUBO_API_URL: ${{ inputs.kubo-api-url }}
        KUBO_API_AUTH: ${{ inputs.kubo-api-auth }}
      run: |
        echo "ℹ️ Uploading CAR with CID ${{ steps.merkleize.outputs.cid }} to Kubo"
        if [ -n "${ACTIONS_RUNNER_DEBUG}" ]; then
          export GOLOG_LOG_LEVEL='debug'
        fi
        ipfs dag import build.car --api ${KUBO_API_URL} --api-auth ${KUBO_API_AUTH}

        echo "✅ Uploaded CAR with CID ${{ steps.merkleize.outputs.cid }} to Kubo" >> $GITHUB_STEP_SUMMARY

    - name: Setup IPFS Cluster CLI
      if: ${{ inputs.cluster-url != ''}}
      uses: ipfs/download-ipfs-distribution-action@v1
      with:
        name: ipfs-cluster-ctl
        version: ${{ inputs.cluster-version }}

    - name: Upload CAR to IPFS Cluster
      if: ${{ inputs.cluster-url != '' && inputs.cluster-user != '' && inputs.cluster-password != '' }}
      shell: bash
      env:
        IPFS_CLUSTER_URL: ${{ inputs.cluster-url }}
        IPFS_CLUSTER_USER: ${{ inputs.cluster-user }}
        IPFS_CLUSTER_PASSWORD: ${{ inputs.cluster-password }}
      run: |
        echo "ℹ️ Uploading CAR with CID ${{ steps.merkleize.outputs.cid }} to IPFS Cluster" >> $GITHUB_STEP_SUMMARY
        if [ -n "${ACTIONS_RUNNER_DEBUG}" ]; then
          export GOLOG_LOG_LEVEL='debug'
        fi
        # the --local flag will add the CAR to the local IPFS daemon of the peer receiving the request, but not wait for it to be fully replicated.
        ipfs-cluster-ctl \
          --enc=json \
          --host ${IPFS_CLUSTER_URL} \
          --basic-auth ${IPFS_CLUSTER_USER}:${IPFS_CLUSTER_PASSWORD} \
          add --format=car \
          --local \
          --name "${{ github.repository }}/${{ github.sha }}" \
          build.car

        echo "✅ Uploaded CAR with CID ${{ steps.merkleize.outputs.cid }} to IPFS Cluster" >> $GITHUB_STEP_SUMMARY

    - name: Upload CAR to Filebase
      if: ${{ inputs.filebase-access-key != '' }}
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.filebase-access-key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.filebase-secret-key }}
        FILEBASE_BUCKET: ${{ inputs.filebase-bucket }}
      run: |
        echo "ℹ️ Uploading CAR with CID ${{ steps.merkleize.outputs.cid }} to Filebase"
        aws --endpoint https://s3.filebase.com s3 cp build.car s3://${FILEBASE_BUCKET} --metadata 'import=car'
        if [ $? -eq 0 ]; then
          echo "✅ Uploaded CAR with CID ${{ steps.merkleize.outputs.cid }} to Filebase" >> $GITHUB_STEP_SUMMARY
        else
          echo "::error::Failed to upload to Filebase"
          exit 1
        fi

    - name: Pin CID to Pinata
      if: ${{ inputs.pinata-jwt-token != ''}}
      shell: bash
      run: |
        ipfs init
        ipfs pin remote service add pinata "${{ inputs.pinata-pinning-url }}" ${{ inputs.pinata-jwt-token }}
        ipfs pin remote add --service=pinata --background --name="build-${{ github.event.pull_request.head.sha || github.sha }}" ${{ steps.merkleize.outputs.cid }}
        echo "✅ Pinned CID ${{ steps.merkleize.outputs.cid }} to Pinata" >> $GITHUB_STEP_SUMMARY

    - name: Create GitHub Deployment
      if: ${{ inputs.create-github-deployments }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const cid = '${{ steps.merkleize.outputs.cid }}';
          const isPR = context.eventName === 'pull_request';

          // For PR events, we need to use the head SHA
          const sha = isPR
            ? context.payload.pull_request.head.sha
            : context.sha;

          await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: sha,
            environment: isPR ? 'preview' : 'production',
            transient_environment: isPR,
            description: `CID: ${cid}`,
            target_url: `https://inbrowser.link/ipfs/${cid}`
          });


    - name: Set GitHub commit status
      if: ${{ inputs.set-github-status }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const cid = '${{ steps.merkleize.outputs.cid }}';

          // For PR events, we need to use the head SHA
          const sha = context.eventName === 'pull_request'
            ? context.payload.pull_request.head.sha
            : context.sha;

          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: sha,
            state: 'success',
            target_url: `https://inbrowser.link/ipfs/${cid}`,
            description: `CID: ${cid}`,
            context: 'IPFS'
          });

    - name: Find Comment to update
      if: ${{ inputs.set-github-status && github.event_name == 'pull_request' }}
      uses: peter-evans/find-comment@v3
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: '🚀 Build'
        token: ${{ inputs.github-token }}

    - name: Create or update comment
      if: ${{ inputs.set-github-status && github.event_name == 'pull_request' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ inputs.github-token }}
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### 🚀 Build Preview on IPFS ready
          - 🔎 Commit: ${{ github.event.pull_request.head.sha || github.sha }}
          - 🔏 CID `${{ steps.merkleize.outputs.cid }}`
          - 📦 [Preview](https://inbrowser.link/ipfs/${{ steps.merkleize.outputs.cid }})
        edit-mode: replace
